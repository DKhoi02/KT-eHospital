// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Context;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("backend.Models.Appointment", b =>
                {
                    b.Property<int>("appointment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("appointment_id"), 1L, 1);

                    b.Property<int?>("apointment_room_id")
                        .HasColumnType("int");

                    b.Property<int?>("appointment_doctor_id")
                        .HasColumnType("int");

                    b.Property<int?>("appointment_ordinal_number")
                        .HasColumnType("int");

                    b.Property<int?>("appointment_pharmacist_id")
                        .HasColumnType("int");

                    b.Property<int>("appointment_regulation_id")
                        .HasColumnType("int");

                    b.Property<string>("appointment_status")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("appointment_symptom")
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("appointment_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("appointment_user_id")
                        .HasColumnType("int");

                    b.HasKey("appointment_id");

                    b.HasIndex("apointment_room_id");

                    b.HasIndex("appointment_doctor_id");

                    b.HasIndex("appointment_pharmacist_id");

                    b.HasIndex("appointment_regulation_id");

                    b.HasIndex("appointment_user_id");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("backend.Models.Blog", b =>
                {
                    b.Property<int>("blog_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("blog_id"), 1L, 1);

                    b.Property<string>("blog_content")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("blog_demo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("blog_img")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("blog_status")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("blog_title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("blog_id");

                    b.ToTable("Blogs", (string)null);
                });

            modelBuilder.Entity("backend.Models.ClickBlog", b =>
                {
                    b.Property<int>("click_blog_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("click_blog_id"), 1L, 1);

                    b.Property<int>("click_blog_blog_id")
                        .HasColumnType("int");

                    b.Property<int>("click_blog_count")
                        .HasColumnType("int");

                    b.Property<int>("click_blog_user_id")
                        .HasColumnType("int");

                    b.HasKey("click_blog_id");

                    b.HasIndex("click_blog_blog_id");

                    b.HasIndex("click_blog_user_id");

                    b.ToTable("ClickBlogs", (string)null);
                });

            modelBuilder.Entity("backend.Models.Medicine", b =>
                {
                    b.Property<int>("medicine_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("medicine_id"), 1L, 1);

                    b.Property<DateTime>("medicine_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("medicine_description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("medicine_image")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("medicine_name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("medicine_price")
                        .HasColumnType("float");

                    b.Property<int>("medicine_quantity")
                        .HasColumnType("int");

                    b.Property<string>("medicine_status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("medicine_id");

                    b.ToTable("Medicines", (string)null);
                });

            modelBuilder.Entity("backend.Models.Prescription", b =>
                {
                    b.Property<int>("prescription_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("prescription_id"), 1L, 1);

                    b.Property<int>("prescription_appointment_id")
                        .HasColumnType("int");

                    b.Property<int>("prescription_eachtime_take")
                        .HasColumnType("int");

                    b.Property<int>("prescription_medicine_id")
                        .HasColumnType("int");

                    b.Property<int>("prescription_number_medicine_perday")
                        .HasColumnType("int");

                    b.Property<double>("prescription_price")
                        .HasColumnType("float");

                    b.Property<int>("prescription_quantity")
                        .HasColumnType("int");

                    b.Property<double>("prescription_total")
                        .HasColumnType("float");

                    b.HasKey("prescription_id");

                    b.HasIndex("prescription_appointment_id");

                    b.HasIndex("prescription_medicine_id");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("backend.Models.Regulations", b =>
                {
                    b.Property<int>("regulation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("regulation_id"), 1L, 1);

                    b.Property<int>("regulation_quantity_appointment")
                        .HasColumnType("int");

                    b.HasKey("regulation_id");

                    b.ToTable("Regulations", (string)null);
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Property<int>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("role_id"), 1L, 1);

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("role_id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("backend.Models.Room", b =>
                {
                    b.Property<int>("room_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("room_id"), 1L, 1);

                    b.Property<string>("room_name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("room_status")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("room_id");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("backend.Models.Schedule", b =>
                {
                    b.Property<int>("schedule_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("schedule_id"), 1L, 1);

                    b.Property<DateTime?>("schedule_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("schedule_doctor_id")
                        .HasColumnType("int");

                    b.Property<int?>("schedule_room_id")
                        .HasColumnType("int");

                    b.HasKey("schedule_id");

                    b.HasIndex("schedule_doctor_id");

                    b.HasIndex("schedule_room_id");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"), 1L, 1);

                    b.Property<string>("user_address")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("user_birthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_fullName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_gender")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("user_image")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_introduction")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("user_password")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_phoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("user_quantity_canceled")
                        .HasColumnType("int");

                    b.Property<string>("user_refreshToken")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("user_refreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("user_resetPasswordExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_resetPasswordToken")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("user_role_id")
                        .HasColumnType("int");

                    b.Property<string>("user_status")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("user_token")
                        .HasColumnType("varchar(255)");

                    b.HasKey("user_id");

                    b.HasIndex("user_role_id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("backend.Models.Appointment", b =>
                {
                    b.HasOne("backend.Models.Room", "room")
                        .WithMany("Appointments")
                        .HasForeignKey("apointment_room_id");

                    b.HasOne("backend.Models.User", "doctor")
                        .WithMany()
                        .HasForeignKey("appointment_doctor_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend.Models.User", "pharmacist")
                        .WithMany()
                        .HasForeignKey("appointment_pharmacist_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend.Models.Regulations", "regulation")
                        .WithMany("appointments")
                        .HasForeignKey("appointment_regulation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "user")
                        .WithMany("appointments")
                        .HasForeignKey("appointment_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("pharmacist");

                    b.Navigation("regulation");

                    b.Navigation("room");

                    b.Navigation("user");
                });

            modelBuilder.Entity("backend.Models.ClickBlog", b =>
                {
                    b.HasOne("backend.Models.Blog", "blog")
                        .WithMany("clickBlogs")
                        .HasForeignKey("click_blog_blog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "user")
                        .WithMany("clickBlogs")
                        .HasForeignKey("click_blog_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("blog");

                    b.Navigation("user");
                });

            modelBuilder.Entity("backend.Models.Prescription", b =>
                {
                    b.HasOne("backend.Models.Appointment", "appointment")
                        .WithMany("prescriptions")
                        .HasForeignKey("prescription_appointment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Medicine", "medicine")
                        .WithMany("prescriptions")
                        .HasForeignKey("prescription_medicine_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appointment");

                    b.Navigation("medicine");
                });

            modelBuilder.Entity("backend.Models.Schedule", b =>
                {
                    b.HasOne("backend.Models.User", "doctor")
                        .WithMany("schedules")
                        .HasForeignKey("schedule_doctor_id");

                    b.HasOne("backend.Models.Room", "room")
                        .WithMany("Schedules")
                        .HasForeignKey("schedule_room_id");

                    b.Navigation("doctor");

                    b.Navigation("room");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.HasOne("backend.Models.Role", "role")
                        .WithMany("Users")
                        .HasForeignKey("user_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("backend.Models.Appointment", b =>
                {
                    b.Navigation("prescriptions");
                });

            modelBuilder.Entity("backend.Models.Blog", b =>
                {
                    b.Navigation("clickBlogs");
                });

            modelBuilder.Entity("backend.Models.Medicine", b =>
                {
                    b.Navigation("prescriptions");
                });

            modelBuilder.Entity("backend.Models.Regulations", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("backend.Models.Room", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("appointments");

                    b.Navigation("clickBlogs");

                    b.Navigation("schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
